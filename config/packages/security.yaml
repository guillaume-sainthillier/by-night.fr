security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        legacy:
            algorithm: sha512
            encode_as_base64: false
            iterations: 1

        App\Entity\User:
            algorithm: auto
            migrate_from:
                - bcrypt
                - legacy

    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: ROLE_USER
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
      users:
            entity:
                class: App\Entity\User

    firewalls:
        dev:
            pattern:  ^/(_(profiler|wdt)|bundles|thumb|thumb-asset|media|uploads)/
            security: false
        main:
            lazy: true
            provider: users
            user_checker: App\Security\UserChecker
            pattern: ^/

            entry_point: App\Security\UserFormAuthenticator
            custom_authenticators:
              - App\Security\UserSocialAuthenticator
              - App\Security\UserFormAuthenticator

            logout:
                delete_cookies: ['PHPSESSID']
            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login-social/service/eventbrite, roles: ROLE_ADMIN }
        - { path: ^/_administration, roles: ROLE_ADMIN }
        - { path: ^/social, roles: ROLE_USER }
        - { path: ^/espace-perso, roles: ROLE_USER }
        - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/login$, roles: PUBLIC_ACCESS }
        - { path: ^/login-social, roles: PUBLIC_ACCESS }
        - { path: ^/inscription, roles: PUBLIC_ACCESS }
        - { path: ^/resetting, roles: PUBLIC_ACCESS }
        - { path: ^/verifier-email, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/_private, roles: PUBLIC_ACCESS, ips: [127.0.0.1, ::1, 192.168.0.1/24] }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
