# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    facebook_id_page: '205292952998805'
    google_map_key: '%env(GOOGLE_MAP_KEY_WEB)%'
    twitter_id_page: 'By__Night'
    disable_polled_feeds: '%kernel.debug%'
    twitter.baseurl: https://api.twitter.com/1.1
    patterns.path: '.+'
    patterns.page: '[1-9](\d*)'
    patterns.id: '\d+'
    patterns.slug: '[^/]+'
    patterns.social: 'facebook|google|twitter'
    patterns.admin_social: 'facebook_admin|google_admin|twitter_admin'

services:
    App\Producer\EventProducer: "@old_sound_rabbit_mq.add_event_producer"
    App\Producer\PurgeCdnCacheUrlProducer: "@old_sound_rabbit_mq.purge_cdn_cache_urls_producer"
    App\Producer\RemoveImageThumbnailsProducer: "@old_sound_rabbit_mq.remove_image_thumbnails_producer"

    _defaults:
        autowire: true
        autoconfigure: true
        bind:
            $memoryCache: "@redis.app_cache_pool"
            $secret: "%kernel.secret%"
            $webDir: "%kernel.project_dir%/public"
            $tempPath: "%kernel.project_dir%/var/storage/temp"
            $facebookIdPage: "%facebook_id_page%"
            $twitterIdPage: "%twitter_id_page%"
            $debug: "%kernel.debug%"
            $cloudFrontDistributionID: "%env(AWS_CLOUDFRONT_DISTRIBUTION_ID)%"
            $openAgendaKey: "%env(OPEN_AGENDA_KEY)%"
            $sowprogUsername: "%env(SOWPROG_USER)%"
            $sowprogPassword: "%env(SOWPROG_PASSWORD)%"
            $awinApiKey: "%env(AWIN_API_KEY)%"
            $dataTourismeAppKey: "%env(DATATOURISME_APP_KEY)%"
            $monitor: "%env(APP_MONITOR)%"
            $disableTwitterFeed: "%disable_polled_feeds%"
            $assetThumb: "@app.asset_thumb"
            $dataDir: "%kernel.project_dir%/var/datas"
            $parsers: !tagged_iterator app.parser
            $entityProviders: !tagged_iterator app.entity_provider
            $dtoConverters: !tagged_iterator app.dto_converter
            $entityFactories: !tagged_iterator app.entity_factory
            $comparators: !tagged_iterator app.comparator

    _instanceof:
        App\Contracts\ParserInterface:
            tags: [ 'app.parser' ]
        App\Contracts\EntityProviderInterface:
            tags: [ 'app.entity_provider' ]
        App\Contracts\EntityFactoryInterface:
            tags: [ 'app.entity_factory' ]
        App\Contracts\DtoConverterInterface:
            tags: [ 'app.dto_converter' ]
        App\Contracts\ComparatorInterface:
            tags: [ 'app.comparator' ]

    App\:
        resource: '../src/*'
        exclude:
            - '../src/Annotation'
            - '../src/Entity'
            - '../src/Exception'
            - '../src/Kernel.php'
            - '../src/Migrations'
            - '../src/Geolocalize'
            - '../src/Glide'
            - '../src/Producer'
            - '../src/Reject'
            - '../src/Search'

    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\Request\ParamConverter\:
        resource: '../src/Request/ParamConverter'
        tags:
            - { name: request.param_converter, priority: 0 }

    App\Social\FacebookAdmin:
        arguments:
            $config: { id: "%env(FACEBOOK_API_ID)%", secret: "%env(FACEBOOK_API_SECRET)%"}

    App\Social\Twitter:
        arguments:
            $config: { id: "%env(TWITTER_API_ID)%", secret: "%env(TWITTER_API_SECRET)%"}

    App\Social\Google:
        arguments:
            $config: { id: "unused", secret: "unused"}

    App\Social\Facebook:
        arguments:
            $config: { id: "%env(FACEBOOK_API_ID)%", secret: "%env(FACEBOOK_API_SECRET)%"}

    App\OAuth\TwitterOAuth:
        arguments:
            $clientId: "%env(TWITTER_API_ID)%"
            $clientSecret: "%env(TWITTER_API_SECRET)%"

    App\Archive\EventArchivator:
        arguments:
            $objectPersister: "@fos_elastica.object_persister.event.event"

    App\Form\Type\ReCaptchaType:
        arguments:
            $siteKey: '6LflWQoUAAAAAGDlgrKTOPxxMXwpb932_Q_tuvKX'

    App\Validator\Constraints\EventConstraintValidator:
        tags:
            - { name: validator.constraint_validator, alias: EventContraintValidator }

    App\Doctrine\EventListener\EventParserDataListener:
        tags:
            - { name: doctrine.event_listener, event: preRemove }

    App\Doctrine\EventListener\EntityTagger:
        tags:
            - { name: doctrine.event_listener, event: postPersist }
            - { name: doctrine.event_listener, event: preUpdate }
            - { name: doctrine.event_listener, event: postUpdate }
            - { name: doctrine.event_listener, event: preRemove }
            - { name: doctrine.event_listener, event: postFlush }

    Aws\S3\S3Client:
        arguments:
            -   version: "2006-03-01"
                region: "%env(AWS_S3_REGION)%"
                credentials:
                    key: "%env(AWS_S3_KEY)%"
                    secret: "%env(AWS_S3_SECRET)%"

    Aws\CloudFront\CloudFrontClient:
        arguments:
            -   version: "2018-06-18"
                region: "%env(AWS_S3_REGION)%"
                credentials:
                    key: "%env(AWS_S3_KEY)%"
                    secret: "%env(AWS_S3_SECRET)%"

    # Store session in redis
    Redis:
        class: Redis
        calls:
            - connect:
                  - '%env(REDIS_HOST)%'
                  - '%env(int:REDIS_PORT)%'

    Symfony\Component\HttpFoundation\Session\Storage\Handler\RedisSessionHandler:
        arguments:
            - '@Redis'
            - { prefix: 'by-night' }

    Monolog\Processor\PsrLogMessageProcessor:
        tags: { name: monolog.processor, handler: sentry }

    League\Glide\Server:
        # call the static method
        factory: ['App\Glide\ServerFactory', create]
        arguments:
            - source: '@s3.storage.reader'
              cache: '@thumbs.storage'
              driver: 'imagick'

    app.asset_thumb:
        class: League\Glide\Server
        # call the static method
        factory: ['App\Glide\ServerFactory', create]
        arguments:
            -   source: '@assets.storage.reader'
                cache: '@thumbs.storage'
                driver: 'imagick'
