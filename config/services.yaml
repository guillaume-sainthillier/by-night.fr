# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    facebook_id_page: '205292952998805'
    google_map_key: '%env(GOOGLE_MAP_KEY_WEB)%'
    twitter_id_page: 'By__Night'
    disable_polled_feeds: '%kernel.debug%'
    twitter.baseurl: https://api.twitter.com/1.1
    patterns.path: '.+'
    patterns.page: '[1-9](\d*)'
    patterns.id: '\d+'
    patterns.slug: '[^/]+'
    patterns.social: 'facebook|google|twitter'
    patterns.admin_social: 'facebook_admin|google_admin|twitter_admin'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $memoryCache: '@redis.app_cache_pool'
            $secret: '%kernel.secret%'
            $webDir: '%kernel.project_dir%/public'
            $publicDirectory: '%kernel.project_dir%/public'
            $tempPath: '%kernel.project_dir%/var/storage/temp'
            $facebookIdPage: '%facebook_id_page%'
            $twitterIdPage: '%twitter_id_page%'
            $debug: '%kernel.debug%'
            $cloudFrontDistributionID: '%env(AWS_CLOUDFRONT_DISTRIBUTION_ID)%'
            $openAgendaKey: '%env(OPEN_AGENDA_KEY)%'
            $sowprogUsername: '%env(SOWPROG_USER)%'
            $sowprogPassword: '%env(SOWPROG_PASSWORD)%'
            $awinApiKey: '%env(AWIN_API_KEY)%'
            $dataTourismeAppKey: '%env(DATATOURISME_APP_KEY)%'
            $monitor: '%env(APP_MONITOR)%'
            $disableTwitterFeed: '%disable_polled_feeds%'
            $s3ThumbServer: '@app.s3_thumb_server'
            $assetThumbServer: '@app.asset_thumb_server'
            $dataDir: '%kernel.project_dir%/var/datas'
            $enableHttpCache: '%env(bool:ENABLE_HTTP_CACHE)%'
            $parsers: !tagged_iterator app.parser
            $entityProviders: !tagged_iterator app.entity_provider
            $dtoConverters: !tagged_iterator app.dto_converter
            $entityFactories: !tagged_iterator app.entity_factory
            $comparators: !tagged_iterator app.comparator

    _instanceof:
        App\Contracts\ParserInterface:
            tags: ['app.parser']
        App\Contracts\EntityProviderInterface:
            tags: ['app.entity_provider']
        App\Contracts\EntityFactoryInterface:
            tags: ['app.entity_factory']
        App\Contracts\DtoConverterInterface:
            tags: ['app.dto_converter']
        App\Contracts\ComparatorInterface:
            tags: ['app.comparator']
        App\Contracts\ImageLoaderInterface:
            tags: ['app.image.loader']

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/Admin/Filter'
            - '../src/Annotation'
            - '../src/Dependency'
            - '../src/DependencyInjection'
            - '../src/Dto'
            - '../src/Entity'
            - '../src/Exception'
            - '../src/File'
            - '../src/Kernel.php'
            - '../src/Migrations'
            - '../src/Glide'
            - '../src/Producer'
            - '../src/Reject'
            - '../src/Search'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\Request\ParamConverter\:
        resource: '../src/Request/ParamConverter'
        tags:
            - { name: controller.argument_value_resolver, priority: 150 }

    App\Producer\EventProducer: '@old_sound_rabbit_mq.add_event_producer'
    App\Producer\EventInErrorProducer: '@old_sound_rabbit_mq.add_event_in_error_producer'
    App\Producer\PurgeCdnCacheUrlProducer: '@old_sound_rabbit_mq.purge_cdn_cache_urls_producer'
    App\Producer\RemoveImageThumbnailsProducer: '@old_sound_rabbit_mq.remove_image_thumbnails_producer'

    App\Social\FacebookAdmin:
        arguments:
            $config: { id: '%env(FACEBOOK_API_ID)%', secret: '%env(FACEBOOK_API_SECRET)%' }

    App\Social\Twitter:
        arguments:
            $config: { id: '%env(TWITTER_API_ID)%', secret: '%env(TWITTER_API_SECRET)%' }

    App\Social\Google:
        arguments:
            $config: { id: 'unused', secret: 'unused' }

    App\Social\Facebook:
        arguments:
            $config: { id: '%env(FACEBOOK_API_ID)%', secret: '%env(FACEBOOK_API_SECRET)%' }

    App\OAuth\TwitterOAuth:
        arguments:
            $clientId: '%env(TWITTER_API_ID)%'
            $clientSecret: '%env(TWITTER_API_SECRET)%'

    App\Archive\EventArchivator:
        arguments:
            $objectPersister: '@fos_elastica.object_persister.event'

    App\Form\Type\ReCaptchaType:
        arguments:
            $siteKey: '6LflWQoUAAAAAGDlgrKTOPxxMXwpb932_Q_tuvKX'

    App\Validator\Constraints\EventConstraintValidator:
        tags:
            - { name: validator.constraint_validator, alias: EventContraintValidator }

    App\Doctrine\EventListener\EventParserDataListener:
        tags:
            - { name: doctrine.event_listener, event: preRemove }

    App\Doctrine\EventSubscriber\:
        resource: '../src/Doctrine/EventSubscriber'
        tags:
            - { name: doctrine.event_subscriber }

    App\Doctrine\EntityListener\:
        resource: '../src/Doctrine/EntityListener'
        tags:
            - { name: doctrine.event_subscriber }
            - { name: doctrine.orm.entity_listener, lazy: true }

    App\Doctrine\EventListener\EntityTagger:
        tags:
            - { name: doctrine.event_listener, event: postPersist }
            - { name: doctrine.event_listener, event: preUpdate }
            - { name: doctrine.event_listener, event: postUpdate }
            - { name: doctrine.event_listener, event: preRemove }
            - { name: doctrine.event_listener, event: postFlush }

    Aws\S3\S3Client:
        arguments:
            - version: '2006-03-01'
              region: '%env(AWS_S3_REGION)%'
              credentials:
                  key: '%env(AWS_S3_KEY)%'
                  secret: '%env(AWS_S3_SECRET)%'

    Aws\CloudFront\CloudFrontClient:
        arguments:
            - version: '2018-06-18'
              region: '%env(AWS_S3_REGION)%'
              credentials:
                  key: '%env(AWS_S3_KEY)%'
                  secret: '%env(AWS_S3_SECRET)%'

    # Store session in redis
    Redis:
        class: Redis
        calls:
            - connect:
                  - '%env(REDIS_HOST)%'
                  - '%env(int:REDIS_PORT)%'

    Symfony\Component\HttpFoundation\Session\Storage\Handler\RedisSessionHandler:
        arguments:
            - '@Redis'
            - { prefix: 'by-night' }

    Monolog\Processor\PsrLogMessageProcessor:
        tags: { name: monolog.processor, handler: sentry }

    app.s3_thumb_server:
        class: League\Glide\Server
        # call the static method
        factory: ['App\Glide\ServerFactory', create]
        arguments:
            - source: '@s3.storage.reader'
              cache: '@thumbs.storage'
              driver: 'imagick'

    app.asset_thumb_server:
        class: League\Glide\Server
        # call the static method
        factory: ['App\Glide\ServerFactory', create]
        arguments:
            - source: '@assets.storage.reader'
              cache: '@thumbs.storage'
              driver: 'imagick'

    App\Image\Loader\LoaderRegistry:
        arguments:
            - !tagged_iterator { tag: app.image.loader }

    FOS\ElasticaBundle\Message\Handler\AsyncPersistPageHandler:
        tags: [messenger.message_handler]

    FOS\ElasticaBundle\Persister\AsyncPagerPersister: '@fos_elastica.async_pager_persister'
    FOS\ElasticaBundle\Persister\PersisterRegistry: '@fos_elastica.persister_registry'
